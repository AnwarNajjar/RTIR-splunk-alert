{"alert_action_builder": {"modular_alerts": [{"code": "\n# encoding = utf-8\nfrom rtkit.resource import RTResource\nfrom rtkit.authenticators import CookieAuthenticator\nfrom rtkit.errors import RTResourceError\nfrom rtkit import set_logging\nimport logging\nimport time\nimport json\nimport requests\nimport os\nimport solnlib.splunkenv\n\n# Splunk parameter\n\ndef process_event(helper, *args, **kwargs):\n    \n    ## Setup \n    \n    rtir_ip = helper.get_global_setting('rtir_ip')\n    \n\n    username = helper.get_global_setting(\"username\")\n    \n    password = helper.get_global_setting(\"password\")\n        \n    splunk_ip = helper.get_global_setting(\"splunk_ip\")\n        \n    ## User input\n        \n    title = helper.get_param(\"title\")\n        \n    queue_number = helper.get_param(\"queue_number\")\n        \n    message = helper.get_param(\"message\")\n        \n    sla = helper.get_param(\"sla\")\n    \n    owner = helper.get_param(\"owner\")\n        \n    req_email = helper.get_param(\"req_email\")\n        \n    cc_email = helper.get_param(\"cc_email\")\n        \n    admin_cc_email = helper.get_param(\"admin_cc_email\")\n        \n        \n        \n    ## notable input \n        \n    action =  helper.get_param(\"action\")\n        \n    event_id = helper.get_param(\"event_id\")\n        \n    urgency  = helper.get_param(\"urgency\")\n\n    \n    def get_content () :\n    \n        spk_url = \"https://{}:8000/en-GB/app/search/search?q=search%20%60notable%60%20%7C%20search%20event_id%3D\".format(splunk_ip) +str(event_id)\n        \n        es_url = \"https://{}:8000/en-GB/app/SplunkEnterpriseSecuritySuite/incident_review\".format(splunk_ip)\n        \n        body =\" \\\n        -------------------------------------------- \\\n        \\n***** Notable details ***** \\\n        \\nEvent ID : {0} \\\n        \\nRule Title: {1} \\\n        \\nUrgency: {2} \\\n        \\nAction: {3} \\\n        \\nNotable Url: {4} \\\n        \\nSplunk ES Url: {5} \\\n        \\n -------------------------------------------- \\\n        \\n User Additional information \\\n        \\n \\\n        \\n {6}\".format(str(event_id),str(title),str(urgency),str(action),str(spk_url) , str(es_url) ,str(message) )\n        \n       \n        return body\n    \n    \n\n    def create_ticket(*args):\n        \n        url = \"https://{0}/REST/1.0/\".format(str(rtir_ip))\n        resource = RTResource( url , username , password , CookieAuthenticator)\n        \n        ttime = time.strftime(\"%T\").split(\":\")[0]\n        \n        raw_data = get_content()\n\n        content = {\n            'content': {\n                'Queue': queue_number,\n                'Subject': title,\n                'Text': raw_data,\n                'status': 'open',\n                'Owner': owner,\n                \"Sla\" : sla,\n                \"Requestor\" : req_email,\n                \"Cc\": cc_email ,\n                \"AdminCc\" : admin_cc_email\n            }\n        }  \n        \n        print(dir(content))\n        print(content)  \n        try:\n            response = resource.post(path='ticket/new', payload=content,)\n            \n        except RTResourceError as e :\n            \n            logger.error(e.response.status_int)\n            logger.error(e.response.status)\n            logger.error(e.response.parsed)\n    \n    \n\n    create_ticket()\n\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets the setup parameters and prints them to the log\n    rtir_ip = helper.get_global_setting(\"rtir_ip\")\n    helper.log_info(\"rtir_ip={}\".format(rtir_ip))\n    username = helper.get_global_setting(\"username\")\n    helper.log_info(\"username={}\".format(username))\n    password = helper.get_global_setting(\"password\")\n    helper.log_info(\"password={}\".format(password))\n    splunk_ip = helper.get_global_setting(\"splunk_ip\")\n    helper.log_info(\"splunk_ip={}\".format(splunk_ip))\n\n    # The following example sends rest requests to some endpoint\n    # response is a response object in python requests library\n    response = helper.send_http_request(\"http://www.splunk.com\", \"GET\", parameters=None,\n                                        payload=None, headers=None, cookies=None, verify=True, cert=None, timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n\n    # The following example gets the alert action parameters and prints them to the log\n    queue_number = helper.get_param(\"queue_number\")\n    helper.log_info(\"queue_number={}\".format(queue_number))\n\n    title = helper.get_param(\"title\")\n    helper.log_info(\"title={}\".format(title))\n\n    owner = helper.get_param(\"owner\")\n    helper.log_info(\"owner={}\".format(owner))\n\n    sla = helper.get_param(\"sla\")\n    helper.log_info(\"sla={}\".format(sla))\n\n    message = helper.get_param(\"message\")\n    helper.log_info(\"message={}\".format(message))\n\n    req_email = helper.get_param(\"req_email\")\n    helper.log_info(\"req_email={}\".format(req_email))\n\n    cc_email = helper.get_param(\"cc_email\")\n    helper.log_info(\"cc_email={}\".format(cc_email))\n\n    admin_cc_email = helper.get_param(\"admin_cc_email\")\n    helper.log_info(\"admin_cc_email={}\".format(admin_cc_email))\n\n    urgency = helper.get_param(\"urgency\")\n    helper.log_info(\"urgency={}\".format(urgency))\n\n    event_id = helper.get_param(\"event_id\")\n    helper.log_info(\"event_id={}\".format(event_id))\n\n    action = helper.get_param(\"action\")\n    helper.log_info(\"action={}\".format(action))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action rtir started.\")\n\n    # TODO: Implement your alert action logic here\n    return 0\n", "description": "", "label": "RTIR", "uuid": "bd9f96a03e504338ab4a5d8859195a8b", "parameters": [{"label": "Queue Number", "value": "12", "required": true, "help_string": "", "format_type": "text", "type": "", "default_value": "1", "name": "queue_number"}, {"label": "Title", "value": "Test New Addon", "required": true, "help_string": "Keep it as it, if you want to keep title as the rule name.", "format_type": "text", "type": "", "default_value": "$result.rule_name$", "name": "title"}, {"label": "Owner", "value": "", "required": false, "help_string": "Keep it empty for RT default setting", "format_type": "text", "type": "", "default_value": "", "name": "owner"}, {"label": "SLA", "value": "", "required": false, "help_string": "Keep it empty for RT default setting", "format_type": "text", "type": "", "default_value": "", "name": "sla"}, {"label": "Message", "value": "", "required": false, "help_string": "Additional message body. \n\"By default Alert will send ES notable details with ticket body\"", "format_type": "text", "type": "", "default_value": "", "name": "message"}, {"label": "Requester email", "value": "", "required": false, "help_string": "Keep it empty for RT default email", "format_type": "text", "type": "", "default_value": "", "name": "req_email"}, {"label": "CC email", "value": "", "required": false, "help_string": "Keep it empty for RT default setting", "format_type": "text", "type": "", "default_value": "", "name": "cc_email"}, {"label": "Admin CC email", "value": "", "required": false, "help_string": "Keep it empty for RT default setting", "format_type": "text", "type": "", "default_value": "", "name": "admin_cc_email"}, {"label": "urgency", "value": "$result.urgency$", "required": false, "help_string": "", "format_type": "text", "type": "", "default_value": "$result.urgency$", "name": "urgency"}, {"label": "event_id", "value": "$result.event_id$", "required": false, "help_string": "", "format_type": "text", "type": "", "default_value": "$result.event_id$", "name": "event_id"}, {"label": "action", "value": "$result.action$", "required": false, "help_string": "", "format_type": "text", "type": "", "default_value": "$result.action$", "name": "action"}], "largeIcon": "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", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAFB0lEQVRYR8VYf0xbVRT+XscPYRB+bDg27GBxEtjIYlMoc+rij2i2SBaTJU6jkZFMokbLWLIoW2GDFIkzkTJN5nQREuPiTMwylWz/TA0xTChIhoN1zAUGgiAbDNYNsKU19zxe83r73usraeL9h3Luvaff+c53zr23gl8cYEMQBPCfmY0NZpfP8+ul/2mxxvpwc4LP5xPRLA05ALmd/8yDUwMoD1DuQ7Lz360KSCkSJRA8M1pByH2qfRbkKVOKUos5iU0+cgm40l8+ULkPkgVLWYhRpiW1iOVsHW90IDU9Da+XloYjKOx8CENyRpTyrOSx0lpB5sbjTWG/UCsLNCdnSKnawgFkTFVarWCV0dikD5BmsUiAeDbUBKzk7EBFBVjn0MuQplYlUUcCgAcVacq0WoiqhjQ3caInQEIUU8brRF6uSv2Ip1wOSK3b6y2QQGP8P1MW1K2ZqC8O3MEX7eP4Zm9eYG5s5l+81OzCr/u3hC3lSDT0hOMyvi3Lx7qUuIDfl1tceGNbJp7NTRXLvrVvCnu/HsCqxFi4bGY6REem52H6sAcCBIzVWxBjEA9ZpTagB5Bn0Y8sWwe1h9/fM8GYGk+u8uzduH3Pg5bXcvHC5nQERH37nhf59i7aMNmwlRbPeXxYX9PJ9IrxD4phWDr5ecoOWCvEPqTSGH1+PzIPiWCG6yxIiDWQi4yq31grJBJWrYwhW6AxSteLjKpL1FOuHjZjdVIsLdpY14XZOS9qdq7HO9vXhaSQ9SE2PlZojJ+2jaH2/DBSEmLwZ00hrbvl9iC/vhsrDALG64uDmeevH2z2SUcvXBNzKH98DepLcmjDzhN96Bpx47ncFJyWaY3NVTJACo3xlRYXLg7MwGxMwvm3NpMf249D+Lx9AnkPJqBNQZ+KRwfbWPXDEE61j8OSnYzWN0VnbTdmsPvUVcTHGvBXnUWkWDo6OEAPVXdiwevDd/vysf3hFFpbcrIPHTfvYt/WTDTsEgPlR0BDfNlPuj3YVN9N6yVNMS1k2Trh9fkDNmJIoTEyfbBCGLUz7YlfK2oG6D9sRsaSHBQByY1MS9cn57CtsRcxAjBqt5CY5z0+GGs6GSUYPFKIpPgVgW2UMu5wdS8sYsNRJzE4XFuEB2INoICqnRRQe+UWPJKREJ6hXSf7cWloFgVrE/GzVexBrVemUHb6Ojllzvmhdbhm1zhx37OI5ldzUVKQTluf/uQPXPn7Ph7LScb35ZuC3FHKJEvRsR4MTs2jrHgNjr24gcx7ml34aeAOzMZkXHhb1BI/wvWhHSf60D18F8/kpuJMmdh83z83iC87/kF2WhycB00BlyTqBa8fxupOMvZWmbA2JZ5eGXn2LrD+9Nmejdj96GpFMMyo53A9e/kWys/cQHpiDK7ZzORrYtaDgoZuOphHai2UAWKo9KtraO2fxtDRIqyMM1De7ReG4fhlFF0HTchOjw95AsnR6QHE1t+cXkDhRz2ofCoLh543kk/3ghc5R5yUTpZWzcN10een5qU2pMrUC4j5kXyqvmCkxqj3PcaDY/v2v2tVvQ9FeosIErXeO4tWlWkB0AMuKoDCVZlqzrkJBjgIEJtfDkvLueSr6lKuIa1nkFaUrFMz6Sud9nrZkdYFXfL15DjSxhipT9XDNZLImhodSFN5Skci8oCGpMuZBGI5OookAK21IT82LFfYUQMkP1y1mNH6bWg5+1SrLBpP6Wixw/z8BwvLMmXoXAFCAAAAAElFTkSuQmCC", "short_name": "rtir", "active_response": {"task": ["create"], "supports_adhoc": true, "technology": [{"version": ["1"], "product": "RTIR", "vendor": "RTIR"}], "subject": ["splunk.event"], "category": ["Information Tracking"]}}]}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "customized_settings": [{"internal_name": "", "label": "RTIR IP or Hostname", "type": "text", "required": true, "help_string": "Ex:  rtirhostname.com or 42.32.24.2", "format_type": "text", "value": "10.93.190.20", "default_value": "", "name": "rtir_ip"}, {"internal_name": "", "label": "Username", "type": "text", "required": true, "help_string": "API username", "format_type": "text", "value": "root", "default_value": "", "name": "username"}, {"internal_name": "", "label": "Password", "type": "password", "required": true, "help_string": "API username's password", "format_type": "password", "value": "", "default_value": "", "name": "password"}, {"internal_name": "", "label": "Splunk IP or Hostname", "type": "text", "required": true, "help_string": "Ex: splunkhostname.com or 42.32.24.2", "format_type": "text", "value": "10.93.192.10", "default_value": "", "name": "splunk_ip"}]}}, "basic_builder": {"tab_build_no": "12", "version": "1.0.0", "description": "", "appname": "TA-rtir", "visible": false, "build_no": 1, "theme": "#65A637", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAFB0lEQVRYR8VYf0xbVRT+XscPYRB+bDg27GBxEtjIYlMoc+rij2i2SBaTJU6jkZFMokbLWLIoW2GDFIkzkTJN5nQREuPiTMwylWz/TA0xTChIhoN1zAUGgiAbDNYNsKU19zxe83r73usraeL9h3Luvaff+c53zr23gl8cYEMQBPCfmY0NZpfP8+ul/2mxxvpwc4LP5xPRLA05ALmd/8yDUwMoD1DuQ7Lz360KSCkSJRA8M1pByH2qfRbkKVOKUos5iU0+cgm40l8+ULkPkgVLWYhRpiW1iOVsHW90IDU9Da+XloYjKOx8CENyRpTyrOSx0lpB5sbjTWG/UCsLNCdnSKnawgFkTFVarWCV0dikD5BmsUiAeDbUBKzk7EBFBVjn0MuQplYlUUcCgAcVacq0WoiqhjQ3caInQEIUU8brRF6uSv2Ip1wOSK3b6y2QQGP8P1MW1K2ZqC8O3MEX7eP4Zm9eYG5s5l+81OzCr/u3hC3lSDT0hOMyvi3Lx7qUuIDfl1tceGNbJp7NTRXLvrVvCnu/HsCqxFi4bGY6REem52H6sAcCBIzVWxBjEA9ZpTagB5Bn0Y8sWwe1h9/fM8GYGk+u8uzduH3Pg5bXcvHC5nQERH37nhf59i7aMNmwlRbPeXxYX9PJ9IrxD4phWDr5ecoOWCvEPqTSGH1+PzIPiWCG6yxIiDWQi4yq31grJBJWrYwhW6AxSteLjKpL1FOuHjZjdVIsLdpY14XZOS9qdq7HO9vXhaSQ9SE2PlZojJ+2jaH2/DBSEmLwZ00hrbvl9iC/vhsrDALG64uDmeevH2z2SUcvXBNzKH98DepLcmjDzhN96Bpx47ncFJyWaY3NVTJACo3xlRYXLg7MwGxMwvm3NpMf249D+Lx9AnkPJqBNQZ+KRwfbWPXDEE61j8OSnYzWN0VnbTdmsPvUVcTHGvBXnUWkWDo6OEAPVXdiwevDd/vysf3hFFpbcrIPHTfvYt/WTDTsEgPlR0BDfNlPuj3YVN9N6yVNMS1k2Trh9fkDNmJIoTEyfbBCGLUz7YlfK2oG6D9sRsaSHBQByY1MS9cn57CtsRcxAjBqt5CY5z0+GGs6GSUYPFKIpPgVgW2UMu5wdS8sYsNRJzE4XFuEB2INoICqnRRQe+UWPJKREJ6hXSf7cWloFgVrE/GzVexBrVemUHb6Ojllzvmhdbhm1zhx37OI5ldzUVKQTluf/uQPXPn7Ph7LScb35ZuC3FHKJEvRsR4MTs2jrHgNjr24gcx7ml34aeAOzMZkXHhb1BI/wvWhHSf60D18F8/kpuJMmdh83z83iC87/kF2WhycB00BlyTqBa8fxupOMvZWmbA2JZ5eGXn2LrD+9Nmejdj96GpFMMyo53A9e/kWys/cQHpiDK7ZzORrYtaDgoZuOphHai2UAWKo9KtraO2fxtDRIqyMM1De7ReG4fhlFF0HTchOjw95AsnR6QHE1t+cXkDhRz2ofCoLh543kk/3ghc5R5yUTpZWzcN10een5qU2pMrUC4j5kXyqvmCkxqj3PcaDY/v2v2tVvQ9FeosIErXeO4tWlWkB0AMuKoDCVZlqzrkJBjgIEJtfDkvLueSr6lKuIa1nkFaUrFMz6Sud9nrZkdYFXfL15DjSxhipT9XDNZLImhodSFN5Skci8oCGpMuZBGI5OookAK21IT82LFfYUQMkP1y1mNH6bWg5+1SrLBpP6Wixw/z8BwvLMmXoXAFCAAAAAElFTkSuQmCC", "large_icon": "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", "tab_version": "2.2.0", "friendly_name": "RTIR", "author": "Anwar Al-Najjar"}}